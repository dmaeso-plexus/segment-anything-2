name: Sync, Build and Release

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at 00:00 UTC every day
  workflow_dispatch:  # Allows manual triggering

jobs:
  sync-build-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'  # Specify the exact Python version
    
    - name: Setup CUDA
      uses: Jimver/cuda-toolkit@v0.2.11
      id: cuda-toolkit
      with:
        cuda: '11.8.0'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
    
    - name: Install PyTorch and torchvision
      run: |
        pip install torch>=2.3.1 torchvision>=0.18.1 --extra-index-url https://download.pytorch.org/whl/cu118
    
    - name: Sync Fork
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git remote add upstream https://github.com/facebookresearch/segment-anything-2.git
        git fetch upstream
        git checkout main
        git merge upstream/main --no-edit
        git push origin main
    
    - name: Update setup.py
      run: |
        sed -i 's/NAME = ".*"/NAME = "SAM_2"/' setup.py
    
    - name: Build Python packages
      env:
        CUDA_HOME: ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}
        SAM2_BUILD_ALLOW_ERRORS: 0
      run: |
        python3 setup.py sdist bdist_wheel
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(python setup.py --version)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Create Git tag
      run: |
        git tag -f "v${{ steps.get_version.outputs.VERSION }}"
        git push origin "v${{ steps.get_version.outputs.VERSION }}" --force
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/SAM_2-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl
        asset_name: SAM_2-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl
        asset_content_type: application/octet-stream
